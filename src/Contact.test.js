import { getByRole, getByTestId, render, screen } from '@testing-library/react';
import { BrowserRouter as Router } from 'react-router-dom';
import { MemoryRouter } from 'react-router-dom'; //For BrowserRouter elements
import userEvent from '@testing-library/user-event';


import Contact from './Pages/Contact'

const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

test("Will throw an error when not wrapped", () => {
    const actual = () => {
      render(<Contact />);
    };
    expect(actual).toThrow();
  });
  //Can be wrapped in a router
  test("Contact render", () => {
    const actual = () => {
      render(<Router><Contact /></Router>);
    };
    expect(actual).not.toThrow();
  });
  //or this can be done with memory router
test('check contact exists', () => {
  render(<Contact />, {wrapper: MemoryRouter});
  expect(true).toBeTruthy();
});
test('Check 4 headings present', ()=> {
  render(<Contact />, {wrapper: MemoryRouter});
  const headingElements = screen.getAllByRole('heading')
  expect(headingElements.length).toBe(4);
})
test('Check 4 paragraphs are present', ()=> {
  render(<Contact />, {wrapper: MemoryRouter});
  const paragraphElements = screen.getAllByRole('paragraph')
  expect(paragraphElements.length).toBe(4);
})
test('Check each heading name is present', ()=> {
  render(<Contact />, {wrapper: MemoryRouter});
  const messageheadingElement = screen.getByRole('heading', { name: /send us a message/i })
  const emailheadingElement = screen.getByRole('heading', { name: /email/i })
  const phoneheadingElement = screen.getByRole('heading', { name: /Phone/i })
  const streetheadingElement = screen.getByRole('heading', { name: /Street address/i })
  expect(messageheadingElement).toBeInTheDocument();
  expect(emailheadingElement).toBeInTheDocument();
  expect(phoneheadingElement).toBeInTheDocument();
  expect(streetheadingElement).toBeInTheDocument();
})
test("check form has 4 text fields", () => {
    render(<Contact />, {wrapper: MemoryRouter});
    const textboxElements = screen.getAllByRole("textbox")
    expect(textboxElements.length).toBe(4)
  })
test("check user can fill in all fields", () => {
  render(<Contact />, {wrapper: MemoryRouter});
  const nameInput = screen.getByRole("textbox", {name: /name/i,})
  const emailInput = screen.getByRole("textbox", {name: /email/i,})
  const subjectInput = screen.getByRole("textbox", {name: /subject/i,})
  const messageInput = screen.getByRole("textbox", {name: /message/i,})
  userEvent.type(nameInput, "john Doe")
  userEvent.type(emailInput, "202205522@mywhitecliffe.com")
  userEvent.type(subjectInput, "Lorem Ipsum")
  userEvent.type(messageInput, "The Lazy Brown Fox Jumped")
  expect(nameInput.value).toBe("john Doe")
  expect(emailInput.value).toBe("202205522@mywhitecliffe.com")
  expect(subjectInput.value).toBe("Lorem Ipsum")
  expect(messageInput.value).toBe("The Lazy Brown Fox Jumped")
})
// Generated by Selenium IDE
describe('test for incorrect email format', function() {
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('check error is displayed if email format is incorrect', async function() {
    await driver.get("http://localhost:3001/")
    await driver.manage().window().setRect({ width: 1169, height: 1022 })
    await driver.findElement(By.linkText("Contact Us")).click()
    await driver.findElement(By.id("name")).click()
    await driver.findElement(By.id("name")).sendKeys("test name")
    await driver.findElement(By.id("email")).sendKeys("bademail.com")
    await driver.findElement(By.id("subject")).sendKeys("subject")
    await driver.findElement(By.id("message")).sendKeys("message here")
    {
        const elements = await driver.findElements(By.css("p:nth-child(1)"))
        assert(elements.length)
    }
    assert(await driver.findElement(By.css("p:nth-child(1)")).getText() == "email is invalid")
  })
})
describe('test for correct email format', function() {
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('Check that a good email does not throw invalid message', async function() {
    await driver.get("http://localhost:3001/")
    await driver.manage().window().setRect({ width: 1169, height: 1022 })
    await driver.findElement(By.linkText("Contact Us")).click()
    await driver.findElement(By.id("name")).click()
    await driver.findElement(By.id("name")).sendKeys("test name")
    await driver.findElement(By.id("email")).sendKeys("good@email.com")
    await driver.findElement(By.id("subject")).sendKeys("subject")
    await driver.findElement(By.id("message")).sendKeys("message here")
    {
        const elements = await driver.findElements(By.css("p:nth-child(1)"))
      assert(!elements.length)
      }
  })
})
test('Check for submit button on Contact Page', () => {
    render(<Contact />, {wrapper: MemoryRouter});
    const buttonElement = screen.getByRole("button") 
    expect(buttonElement).toBeInTheDocument();
  })
test('Check google maps element is present', ()=> {
    render(<Contact />, {wrapper: MemoryRouter});
    const mapsElement = screen.getByRole('gmaps')
    expect(mapsElement).toBeInTheDocument();
  })